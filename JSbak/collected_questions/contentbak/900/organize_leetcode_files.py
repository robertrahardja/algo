import os
import shutil
import re

# Dictionary mapping file names to their data structures
file_to_ds = {
    "501_Find_Mode_in_Binary_Search_Tree_question.md": "Binary Search Tree",
    "502_IPO_question.md": "Priority Queue",
    "503_Next_Greater_Element_II_question.md": "Stack",
    "504_Base_7_question.md": "Math",
    "505_The_Maze_II_question.md": "Graph",
    "506_Relative_Ranks_question.md": "Array",
    "507_Perfect_Number_question.md": "Math",
    "508_Most_Frequent_Subtree_Sum_question.md": "Binary Tree",
    "509_Fibonacci_Number_question.md": "Dynamic Programming",
    "510_Inorder_Successor_in_BST_II_question.md": "Binary Search Tree",
    "511_Game_Play_Analysis_I_question.md": "SQL",
    "512_Game_Play_Analysis_II_question.md": "SQL",
    "513_Find_Bottom_Left_Tree_Value_question.md": "Binary Tree",
    "514_Freedom_Trail_question.md": "Dynamic Programming",
    "515_Find_Largest_Value_in_Each_Tree_Row_question.md": "Binary Tree",
    "516_Longest_Palindromic_Subsequence_question.md": "Dynamic Programming",
    "517_Super_Washing_Machines_question.md": "Array",
    "518_Coin_Change_2_question.md": "Dynamic Programming",
    "519_Random_Flip_Matrix_question.md": "Hash Table",
    "520_Detect_Capital_question.md": "String",
    "521_Longest_Uncommon_Subsequence_I_question.md": "String",
    "522_Longest_Uncommon_Subsequence_II_question.md": "String",
    "523_Continuous_Subarray_Sum_question.md": "Hash Table",
    "524_Longest_Word_in_Dictionary_through_Deleting_question.md": "String",
    "525_Contiguous_Array_question.md": "Hash Table",
    "526_Beautiful_Arrangement_question.md": "Backtracking",
    "527_Word_Abbreviation_question.md": "Hash Table",
    "528_Random_Pick_with_Weight_question.md": "Binary Search",
    "529_Minesweeper_question.md": "DFS",
    "530_Minimum_Absolute_Difference_in_BST_question.md": "Binary Search Tree",
    "531_Lonely_Pixel_I_question.md": "Array",
    "532_K-diff_Pairs_in_an_Array_question.md": "Hash Table",
    "533_Lonely_Pixel_II_question.md": "Array",
    "534_Game_Play_Analysis_III_question.md": "SQL",
    "535_Encode_and_Decode_TinyURL_question.md": "Hash Table",
    "536_Construct_Binary_Tree_from_String_question.md": "Binary Tree",
    "537_Complex_Number_Multiplication_question.md": "Math",
    "538_Convert_BST_to_Greater_Tree_question.md": "Binary Search Tree",
    "539_Minimum_Time_Difference_question.md": "String",
    "540_Single_Element_in_a_Sorted_Array_question.md": "Binary Search",
    "541_Reverse_String_II_question.md": "String",
    "542_01_Matrix_question.md": "BFS",
    "543_Diameter_of_Binary_Tree_question.md": "Binary Tree",
    "544_Output_Contest_Matches_question.md": "Recursion",
    "545_Boundary_of_Binary_Tree_question.md": "Binary Tree",
    "546_Remove_Boxes_question.md": "Dynamic Programming",
    "547_Friend_Circles_question.md": "Union Find",
    "548_Split_Array_with_Equal_Sum_question.md": "Array",
    "549_Binary_Tree_Longest_Consecutive_Sequence_II_question.md": "Binary Tree",
    "550_Game_Play_Analysis_IV_question.md": "SQL",
    "551_Student_Attendance_Record_I_question.md": "String",
    "552_Student_Attendance_Record_II_question.md": "Dynamic Programming",
    "553_Optimal_Division_question.md": "Math",
    "554_Brick_Wall_question.md": "Hash Table",
    "555_Split_Concatenated_Strings_question.md": "String",
    "556_Next_Greater_Element_III_question.md": "String",
    "557_Reverse_Words_in_a_String_III_question.md": "String",
    "558_Quad_Tree_Intersection_question.md": "Tree",
    "559_Maximum_Depth_of_N-ary_Tree_question.md": "Tree",
    "560_Subarray_Sum_Equals_K_question.md": "Hash Table",
    "561_Array_Partition_I_question.md": "Array",
    "562_Longest_Line_of_Consecutive_One_in_Matrix_question.md": "Array",
    "563_Binary_Tree_Tilt_question.md": "Binary Tree",
    "564_Find_the_Closest_Palindrome_question.md": "String",
    "565_Array_Nesting_question.md": "Array",
    "566_Reshape_the_Matrix_question.md": "Array",
    "567_Permutation_in_String_question.md": "Sliding Window",
    "568_Maximum_Vacation_Days_question.md": "Dynamic Programming",
    "569_Median_Employee_Salary_question.md": "SQL",
    "570_Managers_with_at_Least_5_Direct_Reports_question.md": "SQL",
    "571_Find_Median_Given_Frequency_of_Numbers_question.md": "SQL",
    "572_Subtree_of_Another_Tree_question.md": "Binary Tree",
    "573_Squirrel_Simulation_question.md": "Math",
    "574_Winning_Candidate_question.md": "SQL",
    "575_Distribute_Candies_question.md": "Hash Table",
    "576_Out_of_Boundary_Paths_question.md": "Dynamic Programming",
    "577_Employee_Bonus_question.md": "SQL",
    "578_Get_Highest_Answer_Rate_Question_question.md": "SQL",
    "579_Find_Cumulative_Salary_of_an_Employee_question.md": "SQL",
    "580_Count_Student_Number_in_Departments_question.md": "SQL",
    "581_Shortest_Unsorted_Continuous_Subarray_question.md": "Array",
    "582_Kill_Process_question.md": "Tree",
    "583_Delete_Operation_for_Two_Strings_question.md": "Dynamic Programming",
    "584_Find_Customer_Referee_question.md": "SQL",
    "585_Investments_in_2016_question.md": "SQL",
    "586_Customer_Placing_the_Largest_Number_of_Orders_question.md": "SQL",
    "587_Erect_the_Fence_question.md": "Geometry",
    "588_Design_In-Memory_File_System_question.md": "Design",
    "589_N-ary_Tree_Preorder_Traversal_question.md": "Tree",
    "590_N-ary_Tree_Postorder_Traversal_question.md": "Tree",
    "591_Tag_Validator_question.md": "Stack",
    "592_Fraction_Addition_and_Subtraction_question.md": "Math",
    "593_Valid_Square_question.md": "Math",
    "594_Longest_Harmonious_Subsequence_question.md": "Hash Table",
    "595_Big_Countries_question.md": "SQL",
    "596_Classes_More_Than_5_Students_question.md": "SQL",
    "597_Friend_Requests_I_Overall_Acceptance_Rate_question.md": "SQL",
    "598_Range_Addition_II_question.md": "Math",
    "599_Minimum_Index_Sum_of_Two_Lists_question.md": "Hash Table",
    "600_Non-negative_Integers_without_Consecutive_Ones_question.md": "Dynamic Programming",
    "601_Human_Traffic_of_Stadium_question.md": "SQL",
    "602_Friend_Requests_II_Who_Has_the_Most_Friends_question.md": "SQL",
    "603_Consecutive_Available_Seats_question.md": "SQL",
    "604_Design_Compressed_String_Iterator_question.md": "Design",
    "605_Can_Place_Flowers_question.md": "Array",
    "606_Construct_String_from_Binary_Tree_question.md": "Binary Tree",
    "607_Sales_Person_question.md": "SQL",
    "608_Tree_Node_question.md": "SQL",
    "609_Find_Duplicate_File_in_System_question.md": "Hash Table",
    "610_Triangle_Judgement_question.md": "SQL",
    "611_Valid_Triangle_Number_question.md": "Array",
    "612_Shortest_Distance_in_a_Plane_question.md": "SQL",
    "613_Shortest_Distance_in_a_Line_question.md": "SQL",
    "614_Second_Degree_Follower_question.md": "SQL",
    "615_Average_Salary_Departments_VS_Company_question.md": "SQL",
    "616_Add_Bold_Tag_in_String_question.md": "String",
    "617_Merge_Two_Binary_Trees_question.md": "Binary Tree",
    "618_Students_Report_By_Geography_question.md": "SQL",
    "619_Biggest_Single_Number_question.md": "SQL",
    "620_Not_Boring_Movies_question.md": "SQL",
    "621_Task_Scheduler_question.md": "Queue",
    "622_Design_Circular_Queue_question.md": "Queue",
    "623_Add_One_Row_to_Tree_question.md": "Binary Tree",
    "624_Maximum_Distance_in_Arrays_question.md": "Array",
    "625_Minimum_Factorization_question.md": "Math",
    "626_Exchange_Seats_question.md": "SQL",
    "627_Swap_Salary_question.md": "SQL",
    "628_Maximum_Product_of_Three_Numbers_question.md": "Math",
    "629_K_Inverse_Pairs_Array_question.md": "Dynamic Programming",
    "630_Course_Schedule_III_question.md": "Heap",
    "631_Design_Excel_Sum_Formula_question.md": "Design",
    "632_Smallest_Range_Covering_Elements_from_K_Lists_question.md": "Heap",
    "633_Sum_of_Square_Numbers_question.md": "Math",
    "634_Find_the_Derangement_of_An_Array_question.md": "Dynamic Programming",
    "635_Design_Log_Storage_System_question.md": "Design",
    "636_Exclusive_Time_of_Functions_question.md": "Stack",
    "637_Average_of_Levels_in_Binary_Tree_question.md": "Binary Tree",
    "638_Shopping_Offers_question.md": "Dynamic Programming",
    "639_Decode_Ways_II_question.md": "Dynamic Programming",
    "640_Solve_the_Equation_question.md": "Math",
    "641_Design_Circular_Deque_question.md": "Queue",
    "642_Design_Search_Autocomplete_System_question.md": "Trie",
    "643_Maximum_Average_Subarray_I_question.md": "Array",
    "644_Maximum_Average_Subarray_II_question.md": "Binary Search",
    "645_Set_Mismatch_question.md": "Array",
    "646_Maximum_Length_of_Pair_Chain_question.md": "Dynamic Programming",
    "647_Palindromic_Substrings_question.md": "String",
    "648_Replace_Words_question.md": "Trie",
    "649_Dota2_Senate_question.md": "Queue",
    "650_2_Keys_Keyboard_question.md": "Dynamic Programming",
    "651_4_Keys_Keyboard_question.md": "Dynamic Programming",
    "652_Find_Duplicate_Subtrees_question.md": "Binary Tree",
    "653_Two_Sum_IV_-_Input_is_a_BST_question.md": "Binary Search Tree",
    "654_Maximum_Binary_Tree_question.md": "Binary Tree",
    "655_Print_Binary_Tree_question.md": "Binary Tree",
    "656_Coin_Path_question.md": "Dynamic Programming",
    "657_Robot_Return_to_Origin_question.md": "String",
    "658_Find_K_Closest_Elements_question.md": "Binary Search",
    "659_Split_Array_into_Consecutive_Subsequences_question.md": "Heap",
    "660_Remove_9_question.md": "Math",
    "661_Image_Smoother_question.md": "Array",
    "662_Maximum_Width_of_Binary_Tree_question.md": "Binary Tree",
    "663_Equal_Tree_Partition_question.md": "Binary Tree",
    "664_Strange_Printer_question.md": "Dynamic Programming",
    "665_Non-decreasing_Array_question.md": "Array",
    "666_Path_Sum_IV_question.md": "Binary Tree",
    "667_Beautiful_Arrangement_II_question.md": "Array",
    "668_Kth_Smallest_Number_in_Multiplication_Table_question.md": "Binary Search",
    "669_Trim_a_Binary_Search_Tree_question.md": "Binary Search Tree",
    "670_Maximum_Swap_question.md": "Math",
    "671_Second_Minimum_Node_In_a_Binary_Tree_question.md": "Binary Tree",
    "672_Bulb_Switcher_II_question.md": "Math",
    "673_Number_of_Longest_Increasing_Subsequence_question.md": "Dynamic Programming",
    "674_Longest_Continuous_Increasing_Subsequence_question.md": "Array",
    "675_Cut_Off_Trees_for_Golf_Event_question.md": "BFS",
    "676_Implement_Magic_Dictionary_question.md": "Hash Table",
    "677_Map_Sum_Pairs_question.md": "Trie",
    "678_Valid_Parenthesis_String_question.md": "Stack",
    "679_24_Game_question.md": "Backtracking",
    "680_Valid_Palindrome_II_question.md": "String",
    "681_Next_Closest_Time_question.md": "String",
    "682_Baseball_Game_question.md": "Stack",
    "683_K_Empty_Slots_question.md": "Array",
    "684_Redundant_Connection_question.md": "Union Find",
    "685_Redundant_Connection_II_question.md": "Union Find",
    "686_Repeated_String_Match_question.md": "String",
    "687_Longest_Univalue_Path_question.md": "Binary Tree",
    "688_Knight_Probability_in_Chessboard_question.md": "Dynamic Programming",
    "689_Maximum_Sum_of_3_Non-Overlapping_Subarrays_question.md": "Array",
    "690_Employee_Importance_question.md": "DFS",
    "691_Stickers_to_Spell_Word_question.md": "Dynamic Programming",
    "692_Top_K_Frequent_Words_question.md": "Heap",
    "693_Binary_Number_with_Alternating_Bits_question.md": "Bit Manipulation",
    "694_Number_of_Distinct_Islands_question.md": "DFS",
    "695_Max_Area_of_Island_question.md": "DFS",
    "696_Count_Binary_Substrings_question.md": "String",
    "697_Degree_of_an_Array_question.md": "Hash Table",
    "698_Partition_to_K_Equal_Sum_Subsets_question.md": "Backtracking",
    "699_Falling_Squares_question.md": "Segment Tree",
    "700_Search_in_a_Binary_Search_Tree_question.md": "Binary Search Tree",
    "701_Insert_into_a_Binary_Search_Tree_question.md": "Binary Search Tree",
    "702_Search_in_a_Sorted_Array_of_Unknown_Size_question.md": "Binary Search",
    "703_Kth_Largest_Element_in_a_Stream_question.md": "Heap",
    "704_Binary_Search_question.md": "Binary Search",
    "705_Design_HashSet_question.md": "Design",
    "706_Design_HashMap_question.md": "Design",
    "707_Design_Linked_List_question.md": "Linked List",
    "708_Insert_into_a_Cyclic_Sorted_List_question.md": "Linked List",
    "709_To_Lower_Case_question.md": "String",
    "710_Random_Pick_with_Blacklist_question.md": "Hash Table",
    "711_Number_of_Distinct_Islands_II_question.md": "DFS",
    "712_Minimum_ASCII_Delete_Sum_for_Two_Strings_question.md": "Dynamic Programming",
    "713_Subarray_Product_Less_Than_K_question.md": "Sliding Window",
    "714_Best_Time_to_Buy_and_Sell_Stock_with_Transaction_Fee_question.md": "Dynamic Programming",
    "715_Range_Module_question.md": "Segment Tree",
    "716_Max_Stack_question.md": "Stack",
    "717_1-bit_and_2-bit_Characters_question.md": "Array",
    "718_Maximum_Length_of_Repeated_Subarray_question.md": "Dynamic Programming",
    "719_Find_K-th_Smallest_Pair_Distance_question.md": "Binary Search",
    "720_Longest_Word_in_Dictionary_question.md": "Trie",
    "721_Accounts_Merge_question.md": "Union Find",
    "722_Remove_Comments_question.md": "String",
    "723_Candy_Crush_question.md": "Array",
    "724_Find_Pivot_Index_question.md": "Array",
    "725_Split_Linked_List_in_Parts_question.md": "Linked List",
    "726_Number_of_Atoms_question.md": "Stack",
    "727_Minimum_Window_Subsequence_question.md": "Dynamic Programming",
    "728_Self_Dividing_Numbers_question.md": "Math",
    "729_My_Calendar_I_question.md": "Binary Search Tree",
    "730_Count_Different_Palindromic_Subsequences_question.md": "Dynamic Programming",
    "731_My_Calendar_II_question.md": "Segment Tree",
    "732_My_Calendar_III_question.md": "Segment Tree",
    "733_Flood_Fill_question.md": "DFS",
    "734_Sentence_Similarity_question.md": "Hash Table",
    "735_Asteroid_Collision_question.md": "Stack",
    "736_Parse_Lisp_Expression_question.md": "Stack",
    "737_Sentence_Similarity_II_question.md": "Union Find",
    "738_Monotone_Increasing_Digits_question.md": "Greedy",
    "739_Daily_Temperatures_question.md": "Stack",
    "740_Delete_and_Earn_question.md": "Dynamic Programming",
    "741_Cherry_Pickup_question.md": "Dynamic Programming",
    "742_Closest_Leaf_in_a_Binary_Tree_question.md": "Graph",
    "743_Network_Delay_Time_question.md": "Graph",
    "744_Find_Smallest_Letter_Greater_Than_Target_question.md": "Binary Search",
    "745_Prefix_and_Suffix_Search_question.md": "Trie",
    "746_Min_Cost_Climbing_Stairs_question.md": "Dynamic Programming",
    "747_Largest_Number_At_Least_Twice_of_Others_question.md": "Array",
    "748_Shortest_Completing_Word_question.md": "Hash Table",
    "749_Contain_Virus_question.md": "DFS",
    "750_Number_Of_Corner_Rectangles_question.md": "Array",
    "751_IP_to_CIDR_question.md": "Bit Manipulation",
    "752_Open_the_Lock_question.md": "BFS",
    "753_Cracking_the_Safe_question.md": "Graph",
    "754_Reach_a_Number_question.md": "Math",
    "755_Pour_Water_question.md": "Array",
    "756_Pyramid_Transition_Matrix_question.md": "DFS",
    "757_Set_Intersection_Size_At_Least_Two_question.md": "Greedy",
    "758_Bold_Words_in_String_question.md": "String",
    "759_Employee_Free_Time_question.md": "Heap",
    "760_Find_Anagram_Mappings_question.md": "Hash Table",
    "761_Special_Binary_String_question.md": "Recursion",
    "762_Prime_Number_of_Set_Bits_in_Binary_Representation_question.md": "Bit Manipulation",
    "763_Partition_Labels_question.md": "Greedy",
    "764_Largest_Plus_Sign_question.md": "Dynamic Programming",
    "765_Couples_Holding_Hands_question.md": "Union Find",
    "766_Toeplitz_Matrix_question.md": "Array",
    "767_Reorganize_String_question.md": "Heap",
    "768_Max_Chunks_To_Make_Sorted_II_question.md": "Array",
    "769_Max_Chunks_To_Make_Sorted_question.md": "Array",
    "770_Basic_Calculator_IV_question.md": "Stack",
    "771_Jewels_and_Stones_question.md": "Hash Table",
    "772_Basic_Calculator_III_question.md": "Stack",
    "773_Sliding_Puzzle_question.md": "BFS",
    "774_Minimize_Max_Distance_to_Gas_Station_question.md": "Binary Search",
    "775_Global_and_Local_Inversions_question.md": "Array",
    "776_Split_BST_question.md": "Binary Search Tree",
    "777_Swap_Adjacent_in_LR_String_question.md": "String",
    "778_Swim_in_Rising_Water_question.md": "Binary Search",
    "779_K-th_Symbol_in_Grammar_question.md": "Recursion",
    "780_Reaching_Points_question.md": "Math",
    "781_Rabbits_in_Forest_question.md": "Math",
    "782_Transform_to_Chessboard_question.md": "Bit Manipulation",
    "783_Minimum_Distance_Between_BST_Nodes_question.md": "Binary Search Tree",
    "784_Letter_Case_Permutation_question.md": "Backtracking",
    "785_Is_Graph_Bipartite_question.md": "Graph",
    "786_K-th_Smallest_Prime_Fraction_question.md": "Binary Search",
    "787_Cheapest_Flights_Within_K_Stops_question.md": "Graph",
    "788_Rotated_Digits_question.md": "Dynamic Programming",
    "789_Escape_The_Ghosts_question.md": "Math",
    "790_Domino_and_Tromino_Tiling_question.md": "Dynamic Programming",
    "791_Custom_Sort_String_question.md": "Sort",
    "792_Number_of_Matching_Subsequences_question.md": "Array",
    "793_Preimage_Size_of_Factorial_Zeroes_Function_question.md": "Binary Search",
    "794_Valid_Tic-Tac-Toe_State_question.md": "Array",
    "795_Number_of_Subarrays_with_Bounded_Maximum_question.md": "Array",
    "796_Rotate_String_question.md": "String",
    "797_All_Paths_From_Source_to_Target_question.md": "Graph",
    "798_Smallest_Rotation_with_Highest_Score_question.md": "Array",
    "799_Champagne_Tower_question.md": "Dynamic Programming",
    "800_Similar_RGB_Color_question.md": "Math",
    "801_Minimum_Swaps_To_Make_Sequences_Increasing_question.md": "Dynamic Programming",
    "802_Find_Eventual_Safe_States_question.md": "Graph",
    "803_Bricks_Falling_When_Hit_question.md": "Union Find",
    "804_Unique_Morse_Code_Words_question.md": "String",
    "805_Split_Array_With_Same_Average_question.md": "Dynamic Programming",
    "806_Number_of_Lines_To_Write_String_question.md": "String",
    "807_Max_Increase_to_Keep_City_Skyline_question.md": "Array",
    "808_Soup_Servings_question.md": "Dynamic Programming",
    "809_Expressive_Words_question.md": "String",
    "810_Chalkboard_XOR_Game_question.md": "Math",
    "811_Subdomain_Visit_Count_question.md": "Hash Table",
    "812_Largest_Triangle_Area_question.md": "Math",
    "813_Largest_Sum_of_Averages_question.md": "Dynamic Programming",
    "814_Binary_Tree_Pruning_question.md": "Binary Tree",
    "815_Bus_Routes_question.md": "BFS",
    "816_Ambiguous_Coordinates_question.md": "String",
    "817_Linked_List_Components_question.md": "Linked List",
    "818_Race_Car_question.md": "Dynamic Programming",
    "819_Most_Common_Word_question.md": "Hash Table",
    "820_Short_Encoding_of_Words_question.md": "Trie",
    "821_Shortest_Distance_to_a_Character_question.md": "Array",
    "822_Card_Flipping_Game_question.md": "Hash Table",
    "823_Binary_Trees_With_Factors_question.md": "Dynamic Programming",
    "824_Goat_Latin_question.md": "String",
    "825_Friends_Of_Appropriate_Ages_question.md": "Array",
    "826_Most_Profit_Assigning_Work_question.md": "Greedy",
    "827_Making_A_Large_Island_question.md": "DFS",
    "828_Unique_Letter_String_question.md": "String",
    "829_Consecutive_Numbers_Sum_question.md": "Math",
    "830_Positions_of_Large_Groups_question.md": "Array",
    "831_Masking_Personal_Information_question.md": "String",
    "832_Flipping_an_Image_question.md": "Array",
    "833_Find_And_Replace_in_String_question.md": "String",
    "834_Sum_of_Distances_in_Tree_question.md": "Tree",
    "835_Image_Overlap_question.md": "Array",
    "836_Rectangle_Overlap_question.md": "Math",
    "837_New_21_Game_question.md": "Dynamic Programming",
    "838_Push_Dominoes_question.md": "Two Pointers",
    "839_Similar_String_Groups_question.md": "Union Find",
    "840_Magic_Squares_In_Grid_question.md": "Array",
    "841_Keys_and_Rooms_question.md": "DFS",
    "842_Split_Array_into_Fibonacci_Sequence_question.md": "Backtracking",
    "843_Guess_the_Word_question.md": "Minimax",
    "844_Backspace_String_Compare_question.md": "Stack",
    "845_Longest_Mountain_in_Array_question.md": "Two Pointers",
    "846_Hand_of_Straights_question.md": "Greedy",
    "847_Shortest_Path_Visiting_All_Nodes_question.md": "BFS",
    "848_Shifting_Letters_question.md": "String",
    "849_Maximize_Distance_to_Closest_Person_question.md": "Array",
    "850_Rectangle_Area_II_question.md": "Segment Tree",
    "851_Loud_and_Rich_question.md": "DFS",
    "852_Peak_Index_in_a_Mountain_Array_question.md": "Binary Search",
    "853_Car_Fleet_question.md": "Stack",
    "854_K-Similar_Strings_question.md": "BFS",
    "855_Exam_Room_question.md": "Design",
    "856_Score_of_Parentheses_question.md": "Stack",
    "857_Minimum_Cost_to_Hire_K_Workers_question.md": "Heap",
    "858_Mirror_Reflection_question.md": "Math",
    "859_Buddy_Strings_question.md": "String",
    "860_Lemonade_Change_question.md": "Greedy",
    "861_Score_After_Flipping_Matrix_question.md": "Greedy",
    "862_Shortest_Subarray_with_Sum_at_Least_K_question.md": "Deque",
    "863_All_Nodes_Distance_K_in_Binary_Tree_question.md": "Graph",
    "864_Shortest_Path_to_Get_All_Keys_question.md": "BFS",
    "865_Smallest_Subtree_with_all_the_Deepest_Nodes_question.md": "Binary Tree",
    "866_Prime_Palindrome_question.md": "Math",
    "867_Transpose_Matrix_question.md": "Array",
    "868_Binary_Gap_question.md": "Bit Manipulation",
    "869_Reordered_Power_of_2_question.md": "Math",
    "870_Advantage_Shuffle_question.md": "Greedy",
    "871_Minimum_Number_of_Refueling_Stops_question.md": "Heap",
    "872_Leaf-Similar_Trees_question.md": "Binary Tree",
    "873_Length_of_Longest_Fibonacci_Subsequence_question.md": "Dynamic Programming",
    "874_Walking_Robot_Simulation_question.md": "Simulation",
    "875_Koko_Eating_Bananas_question.md": "Binary Search",
    "876_Middle_of_the_Linked_List_question.md": "Linked List",
    "877_Stone_Game_question.md": "Dynamic Programming",
    "878_Nth_Magical_Number_question.md": "Binary Search",
    "879_Profitable_Schemes_question.md": "Dynamic Programming",
    "880_Decoded_String_at_Index_question.md": "Stack",
    "881_Boats_to_Save_People_question.md": "Two Pointers",
    "882_Reachable_Nodes_In_Subdivided_Graph_question.md": "Dijkstra",
    "883_Projection_Area_of_3D_Shapes_question.md": "Math",
    "884_Uncommon_Words_from_Two_Sentences_question.md": "Hash Table",
    "885_Spiral_Matrix_III_question.md": "Simulation",
    "886_Possible_Bipartition_question.md": "Graph",
    "887_Super_Egg_Drop_question.md": "Dynamic Programming",
    "888_Fair_Candy_Swap_question.md": "Hash Table",
    "889_Construct_Binary_Tree_from_Preorder_and_Postorder_Traversal_question.md": "Binary Tree",
    "890_Find_and_Replace_Pattern_question.md": "String",
    "891_Sum_of_Subsequence_Widths_question.md": "Math",
    "892_Surface_Area_of_3D_Shapes_question.md": "Math",
    "893_Groups_of_Special-Equivalent_Strings_question.md": "String",
    "894_All_Possible_Full_Binary_Trees_question.md": "Dynamic Programming",
    "895_Maximum_Frequency_Stack_question.md": "Stack",
    "896_Monotonic_Array_question.md": "Array",
    "897_Increasing_Order_Search_Tree_question.md": "Binary Search Tree",
    "898_Bitwise_ORs_of_Subarrays_question.md": "Dynamic Programming",
    "899_Orderly_Queue_question.md": "Math",
    "900_RLE_Iterator_question.md": "Design"
}

def organize_files(source_dir, file_to_ds):
    # Create folders for each data structure
    data_structures = set(file_to_ds.values())
    for ds in data_structures:
        # Create folder if it doesn't exist
        ds_folder = os.path.join(source_dir, ds)
        if not os.path.exists(ds_folder):
            os.makedirs(ds_folder)
    
    # Move files to corresponding folders
    for filename, data_structure in file_to_ds.items():
        source_path = os.path.join(source_dir, filename)
        dest_path = os.path.join(source_dir, data_structure, filename)
        
        # Check if the source file exists
        if os.path.exists(source_path):
            shutil.move(source_path, dest_path)
            print(f"Moved {filename} to {data_structure} folder")
        else:
            print(f"File not found: {filename}")

if __name__ == "__main__":
    # Ask user for the source directory
    source_dir = input("Enter the path to the folder containing LeetCode files: ")
    
    # Validate the directory
    if not os.path.isdir(source_dir):
        print(f"Error: {source_dir} is not a valid directory")
    else:
        # Organize the files
        organize_files(source_dir, file_to_ds)
        print("File organization complete!")
